<?xml version="1.0" encoding="UTF-8"?>
<vuf>
<action>
  VUF = {};
  VUF.Log = {};
  VUF.Log.format = function(e,type,?infos){
    switch type {
      case "error": return "VUF Error : " + e;
      case "warn": return "VUF Warning : " + e;
      case "info": return "VUF Info : " + e;
      default: return "VUF : " + e;
    }
  }
  VUF.error = function(e,?infos){
    log(VUF.Log.format(e,"error",infos),0xff0000);
  }
  VUF.info = function(e,?infos){
    log(VUF.Log.format(e,"info",infos),0x00ffff);
  }
  VUF.warn = function(e,?infos){
    log(VUF.format(e,"warn",infos == null ? null : infos),0xff4500);
  }

</action>
  <action>
  // p2 = eval("\"_\"+\"_\"")
    function mountVehicle(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
    	var slot = vehicle.equipment.getSlots();
    	while(slot.hasNext()) {
    		var slot1 = slot.next();
        vehicle.equipment.get(slot1).removeEventListener("updated",function(e){vehicle.runEvent(getLocalPlayer(),"changeEquip");});
    		vehicle.equipment.get(slot1).addEventListener("updated",function(e){vehicle.runEvent(getLocalPlayer(),"changeEquip");});
        vehicle.removeEventListener("update_fuel", storeFuel);
        vehicle.addEventListener("update_fuel", storeFuel);
    	}
    }
</action><action>
    function dismountVehicle(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      // VUF.info("dismount");
      if (vehicle == null) return;
      var slot = vehicle.equipment.getSlots();
      while(slot.hasNext()) {
        var slot1 = slot.next();
        vehicle.equipment.get(slot1).removeEventListener("updated",function(e){vehicle.runEvent(getLocalPlayer(),"changeEquip");});
        vehicle.removeEventListener("update_fuel", storeFuel);
      }
    }

</action><action>
    function updateVehicle(?v){
    var vehicle = v == null ? getLocalPlayer().vehicle : v;
    if (vehicle == null) return;
        updateHealth(vehicle);
        updateDefense(vehicle);
        updateMine(vehicle);
        updateSpeed(vehicle);
        updateFuel(vehicle);
        updateWeight(vehicle);
        updateHitDamage(vehicle);
        updateCloak(vehicle);
        vehicle.gui.init();
    }
</action><action>
    function getStat(stat, ?v){
      var vehicle = (v == null) ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      if (info == null) return "WTF";
      var equipment = vehicle.equipment;
      var xml = info.xml;
      var stat1 = xml.get(stat);
      if (stat1 == null) stat1 = 0;
      var slot = equipment.getSlots();
		    while(slot.hasNext()) {
			      var slot1 = slot.next();
            if (equipment.get(slot1).value == null){stat2 = null;}
            if (equipment.get(slot1).value != null){stat2 = equipment.getItem(slot1).info.xml.get(stat);}
              if (stat2 != null){stat1 = Std.parseInt(stat1) + Std.parseInt(stat2);};
		    }
        return stat1;
    }

</action><action>
    function updateHealth(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.info.health = getStat("health",vehicle);
      if (vehicle.health > vehicle.info.health){vehicle.setHealth(vehicle.info.health);};
    }
</action><action>
    function updateDefense(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      var defense = getStat("defense",vehicle);
      info.front_defense = defense;
      info.back_defense = defense;
    }
</action><action>
    function updateMine(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      vehicle.mine_power = getStat("mine");
      vehicle.mine_speed = getStat("mine_speed");
      vehicle.mine_fuel = getStat("mine_fuel");
    }
</action><action>
    function updateSpeed(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.info.speedX = getStat("speed",vehicle);
      vehicle.info.speedY = getStat("speedY",vehicle) == (null || 0) ? getStat("speed",vehicle) : getStat("speedY",vehicle);
    }
</action><action>
    function updateWeight(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.info.max_weight.set(getStat("max_weight",vehicle));
    }
</action><action>
    function updateFuel(?v){
      var vehicle = (v == null) ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      var equipment = vehicle.equipment;
      var xml = info.xml;
      var max_fuel = 0;
      var maxReplaceFuel = 0;
      var isElectric = vehicle.isPowered();
      var slot = vehicle.equipment.get("engine");
      if (slot.get() == null){
          if(info.xml.first != null){
              for(o in info.xml.second.xml.children){
                if(o.nodeName == "fuel" && o.get("fuel") == null){
                  info.xml.second.xml.removeChild(o);
                }
            }
          }else{
              for(o in info.xml.xml.children){
                if(o.nodeName == "fuel" && o.get("fuel") == null){
                  info.xml.xml.removeChild(o);
                }
              }
          }
          vehicle.fuelName = info.xml.exists("fuelName") ? info.xml.get("fuelName") : vehicle.isPowered() ? "power" : "fuel";
        return null;
      }
      var fuel = slot.get().info.xml.elementsNamed("fuel");
      if(!fuel.hasNext()){
          if(info.xml.first != null){
              for(o in info.xml.second.xml.children){
                if(o.nodeName == "fuel" && o.get("fuel") == null){
                  info.xml.second.xml.removeChild(o);
                }
            }
          }else{
              for(o in info.xml.xml.children){
                if(o.nodeName == "fuel" && o.get("fuel") == null){
                  info.xml.xml.removeChild(o);
                }
              }
          }
          vehicle.fuelName = info.xml.exists("fuelName") ? info.xml.get("fuelName") : vehicle.isPowered() ? "power" : "fuel";
        return null;}
      fuel = fuel.next();
      var amt = Std.parseInt(fuel.get("value"));
      var store_fuel = fuel.get('storeFuel');
      var electric = fuel.get("electric");
        switch fuel.get("method") {
          case "add": info.fuel = info.fuel + (amt == null ? 0 : amt);
          case "replace": info.fuel = (amt == null ? 0 : amt);
          default: info.fuel = info.fuel + (amt == null ? 0 : amt);
        }
        if (fuel.elementsNamed("fuelChange").hasNext()){
          info.fuelItems = [];
          info.fuelMap = new StringMap();
        for(o in fuel.elementsNamed("fuelChange")){
              info.fuelMap.set(o.get("id"),Std.parseInt(o.get("fuel")));
              info.fuelItems.push(Recipe.createFuel(getItem(o.get("id")),Std.parseInt(o.get("fuel"))));
          }
          if(info.xml.first != null){
            info.xml.second.xml.addChild(Xml.createElement("fuel"));
          }else{
          info.xml.xml.addChild(Xml.createElement("fuel"));
          }
        vehicle.fuelName = "fuel";
        }else{
            info.fuelItems = [];
            info.fuelMap = new StringMap();
          for(o in info.xml.elementsNamed("fuel")){
            info.fuelMap.set(o.get("id"),Std.parseInt(o.get("fuel")));
            info.fuelItems.push(Recipe.createFuel(getItem(o.get("id")),Std.parseInt(o.get("fuel"))));
          }
        }

        if(vehicle.fuelItems == []){
          vehicle.fuelName = "power";
          if(info.xml.first != null){
              for(o in info.xml.second.xml.children){
                if(o.nodeName == "fuel" && o.get("fuel") == null){
                  info.xml.second.xml.removeChild(o);
                }
            }
          }else{
              for(o in info.xml.xml.children){
                if(o.nodeName == "fuel" && o.get("fuel") == null){
                  info.xml.xml.removeChild(o);
                }
              }
          }
        }

        if(fuel.get("method") == "replace" && fuel.get('storeFuel') == "true"){
          loadFuel(vehicle,slot.get());
        }
        }
    </action><action>


    function loadFuel(?v,item){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      var amt = item.getFeed();
      if (amt == null){amt = vehicle.fuel;}
      // vehicle.info.fuel = item.getDurability();
      vehicle.fuel = amt;
    }
    </action><action>

    function updateRepair(?v){
      var vehicle = (v == null) ? getLocalPlayer().vehicle : v;
      var info = vehicle.info;

    }
    </action><action>

    // function updateRefuel(?v){
    //   trace("updateRefuel is not enabled yet");
    // }
    </action><action>

    function setElectric(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      var xml = info.xml.first == null ? info.xml.xml : info.xml.second.xml;
        vehicle.fuelName = "power";
        info.fuelItems = null;
        info.fuelMap = null;
        x = new Xml();
        x.nodeName = "fuelStorage";
        xml.addChild(x);
        for (fXml in info.xml.elementsNamed("fuel")) {
            x.addChild(fXml);
        }
    }
    </action><action>

    function storeFuel(event) {
        var veh = event.target;
        var slot = veh.equipment.get("engine");
        var item = slot.get();
        if(item != null){
          var fuel = item.info.xml.elementsNamed("fuel");
          if(fuel.hasNext()){
            var tmp = fuel.next();
            if(tmp.get("storeFuel") == "true"){
              item.value = item.getDurability() - veh.getFuel();
              if(item.value &lt; 0) item.value = 0;
            }
          }
        }
    }

    </action><action>

    function updateHitDamage(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.hitDamage = getStat("hitDamage",vehicle);
    }

</action><action>

    function updateCloak(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var equipment = vehicle.equipment;
      var slot = equipment.getSlots();
      var hidden = vehicle.info.xml.get("hide");
		   while(slot.hasNext()) {
			  var slot1 = slot.next();
			  var hidden1 = equipment.getItem(slot1) == null ? null : equipment.getItem(slot1).info.xml.get("hide");
        if (hidden1 == "true"){hidden = true;}
        if (hidden1 == "false"){hidden = false;}
		   }
      if (hidden == true){
        vehicle.setHidden(true);
        if (vehicle.renderer.alpha > 0.5) vehicle.renderer.lerp(new AlphaKeyframe(0.5),10);
      }else
      if (hidden == false){
        vehicle.setHidden(false);
        if (vehicle.renderer.alpha &lt;= 0.5) vehicle.renderer.lerp(new AlphaKeyframe(1),10);
      }else
      if (hidden == null){
        vehicle.setHidden(false);
        if (vehicle.renderer.alpha &lt;= 0.5) vehicle.renderer.lerp(new AlphaKeyframe(1),10);
      }
    }

  </action>
</vuf>
