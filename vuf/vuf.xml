<?xml version="1.0" encoding="UTF-8"?>
<vuf>
  <action>
    function mountVehicle(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
    	var slot = vehicle.equipment.getSlots();
    	while(slot.hasNext()) {
    		var slot1 = slot.next();
        vehicle.equipment.get(slot1).removeEventListener("updated",function(e){vehicle.runEvent(getLocalPlayer(),"changeEquip");});
    		vehicle.equipment.get(slot1).addEventListener("updated",function(e){vehicle.runEvent(getLocalPlayer(),"changeEquip");});
        vehicle.removeEventListener("update_fuel", storeFuel);
        vehicle.addEventListener("update_fuel", storeFuel);
    	}
    }
</action><action>
    function dismountVehicle(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      trace("dismount");
      if (vehicle == null) return;
      var slot = vehicle.equipment.getSlots();
      while(slot.hasNext()) {
        var slot1 = slot.next();
        vehicle.equipment.get(slot1).removeEventListener("updated",function(e){vehicle.runEvent(getLocalPlayer(),"changeEquip");});
        vehicle.removeEventListener("update_fuel", storeFuel);
      }
    }

</action><action>
    function updateVehicle(?v){
    var vehicle = v == null ? getLocalPlayer().vehicle : v;
    if (vehicle == null) return;
        updateHealth(vehicle);
        updateDefense(vehicle);
        updateMine(vehicle);
        updateSpeed(vehicle);
        updateFuel(vehicle);
        updateWeight(vehicle);
        updateHitDamage(vehicle);
        updateCloak(vehicle);
        vehicle.gui.init();
    }
</action><action>
    function getStat(stat, ?v){
      var vehicle = (v == null) ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      if (info == null) return "WTF";
      var equipment = vehicle.equipment;
      var xml = info.xml;
      var stat1 = xml.get(stat);
      if (stat1 == null) stat1 = 0;
      var slot = equipment.getSlots();
		    while(slot.hasNext()) {
			      var slot1 = slot.next();
            if (equipment.get(slot1).value == null){stat2 = null;}
            if (equipment.get(slot1).value != null){stat2 = equipment.getItem(slot1).info.xml.get(stat);}
              if (stat2 != null){stat1 = Std.parseInt(stat1) + Std.parseInt(stat2);};
		    }
        return stat1;
    }

</action><action>
    function updateHealth(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.info.health = getStat("health",vehicle);
      if (vehicle.health > vehicle.info.health){vehicle.setHealth(vehicle.info.health);};
    }
</action><action>
    function updateDefense(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      var defense = getStat("defense",vehicle);
      info.front_defense = defense;
      info.back_defense = defense;
    }
</action><action>
    function updateMine(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      vehicle.mine_power = getStat("mine");
      vehicle.mine_speed = getStat("mine_speed");
      vehicle.mine_fuel = getStat("mine_fuel");
    }
</action><action>
    function updateSpeed(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.info.speedX = getStat("speed",vehicle);
      vehicle.info.speedY = getStat("speedY",vehicle) == (null || 0) ? getStat("speed",vehicle) : getStat("speedY",vehicle);
    }
</action><action>
    function updateWeight(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.info.max_weight.set(getStat("max_weight",vehicle));
    }
</action><action>
    function updateFuel(?v){
      var vehicle = (v == null) ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
      var equipment = vehicle.equipment;
      var xml = info.xml;
      var max_fuel = 0;
      var maxReplaceFuel = 0;
      var isElectric = vehicle.fuelName == "power";
      var slot = vehicle.equipment.get("engine");
      if (slot.get() == null){return null;}
      var fuel = slot.get().info.xml.elementsNamed("fuel");
      if(!fuel.hasNext()){return null;}
      fuel = fuel.next();
      var method = fuel.get("method");
      var amt = Std.parseInt(fuel.get("value"));
      var store_fuel = fuel.get('storeFuel');
      if (store_fuel == null){store_fuel = false;}
      var electric = fuel.get("electric");
      if (electric == null){electric = isElectric;}

        switch method {
          case "add": info.fuel = info.fuel + (amt == null ? 0 : amt);
          case "replace": info.fuel = (amt == null ? 0 : amt);
          default: info.fuel = info.fuel;
        }
        fuelItems = [];
        fuelMap = new StringMap();
        for (o in fuel.elementsNamed("fuelChange")){
            fuelMap.set(o.get("id"),Std.parseInt(o.get("value")));
            fuelItems.push(Recipe.createFuel(getItem(o.get("id")),Std.parseInt(o.get("value"))));
        }
        if(fuelMap.keys().hasNext()){
            info.fuelItems = fuelItems;
            info.fuelMap = fuelMap;
        }
        if(method == "replace" && store_fuel == "true"){loadFuel(vehicle,slot.get());}
        setElectric(vehicle);
        }
    </action><action>

    function parseForFuel(s){
      var item = s.get();
      if (item == null){return;}
      var fuel = item.info.xml.elementsNamed("fuel");
      if (fuel == null || !fuel.hasNext()){return null;}
      if (fuel.hasNext()){
        fuel = fuel.next();
        trace(fuel);
        var fuelChange = new StringMap();
        var fuelItem = new Array();
        for (o in fuel.elementsNamed("fuelChange")){
          fuelChange.set(o.get("id"),Std.parseInt(o.get("value")));
          fuelItem.push(Recipe.createFuel(getItem(o.get("id")),Std.parseInt(o.get("value"))));
        }
      trace([fuel.get("method"),Std.parseInt(fuel.get("value")),fuel.get("electric"),fuelChange,fuelItem]);
      return [fuel.get("method"),Std.parseInt(fuel.get("value")),fuel.get("electric"),fuelChange,fuelItem];
    }
    }

    function loadFuel(?v,item){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      var amt = item.value;
      if (amt == null){amt = 0;}
      vehicle.fuel = item.value;
    }
    </action><action>

    function updateRepair(?v){
      trace("updateRepair is not enabled yet");
    }
    </action><action>

    // function updateRefuel(?v){
    //   trace("updateRefuel is not enabled yet");
    // }
    </action><action>

    function setElectric(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var info = vehicle.info;
        vehicle.fuelName = "power";
        info.fuelItems = null;
        info.fuelMap = null;
        x = new Xml();
        x.nodeName = "fuelStorage";
        info.xml.xml.addChild(x);
        for (fXml in info.xml.elementsNamed("fuel")) {
            x.addChild(fXml);
        }
    }
    </action><action>

    function storeFuel(event) {
        var veh = event.target;
        trace(veh);
        var slot = veh.equipment.getSlots();
        trace(slot);
        while (slot.hasNext()){
          slot1 = slot.next();
          trace(slot1);
          trace(slot1.get());
          eItem = slot1.get() == null ? null : slot1.get();
          trace(eItem);
          if (eItem == null){trace("Continue");continue; }
          if (eItem != null && eItem.info.xml.elementsNamed("fuel").next() != null) {
            trace("Hmmm");
              if (eItem.info.xml.elementsNamed("fuel").next().get("storeFuel") == "true"){
                eItem.value = veh.fuel;
              }
          }
        }
    }

    </action><action>

    function updateHitDamage(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      vehicle.hitDamage = getStat("hitDamage",vehicle);
    }

</action><action>

    function updateCloak(?v){
      var vehicle = v == null ? getLocalPlayer().vehicle : v;
      if (vehicle == null) return;
      var equipment = vehicle.equipment;
      var slot = equipment.getSlots();
      var hidden = vehicle.info.xml.get("hide");
		   while(slot.hasNext()) {
			  var slot1 = slot.next();
			  var hidden1 = equipment.getItem(slot1) == null ? null : equipment.getItem(slot1).info.xml.get("hide");
        if (hidden1 == "true"){hidden = true;}
        if (hidden1 == "false"){hidden = false;}
		   }
      if (hidden == true){
        vehicle.setHidden(true);
        if (vehicle.renderer.alpha > 0.5) vehicle.renderer.lerp(new AlphaKeyframe(0.5),10);
      }else
      if (hidden == false){
        vehicle.setHidden(false);
        if (vehicle.renderer.alpha &lt;= 0.5) vehicle.renderer.lerp(new AlphaKeyframe(1),10);
      }else
      if (hidden == null){
        vehicle.setHidden(false);
        if (vehicle.renderer.alpha &lt;= 0.5) vehicle.renderer.lerp(new AlphaKeyframe(1),10);
      }
    }

  </action>
</vuf>
